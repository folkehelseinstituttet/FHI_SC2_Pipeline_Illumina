#!/bin/bash

# Developed by 
# Dr. Sreenu Vattipally
# MRC-University of Glasgow Centre for Virus Research
# 8 Church street, Glasgow G11 5JR
# Email: Sreenu.Vattipally@glasgow.ac.uk
#

#   Parameters
#   Paired End                                          -p  0|1 [defaul 0]
#   Include tags with a minimum length of match         -m  [defaul 50]
#   Include unmapped reads in the final alignment file  -u  0|1 [default 0]
#   Reference genome                                    -r  STDIN
#   Input file(s)                                       -i  STDIN
#   Output file                                         -o  [default "FinalAssembly.sam"]
#   Keep temp files                                     -t  [default 0]
# Assign default values

p=0; m=50; u=1; R="_Reference_Genome_"; o="FinalAssembly.sam"; t=0; Proc=4;
ARGC=$#  # Number of args, not counting $0
Usage () { 
    echo ""; 
    echo "Usage (Single-end): tanoti -r reference -i input1.fq -o output.sam"; 
    echo "Usage (Paired-end): tanoti -r reference -i input1.fq input2.fq -p 1 -o output.sam"; 
    echo ""; 
    echo "Optional parameters:"; 
    echo "-m : minimum match percentage of a read (default 5)"; 
    echo "-u : include unmapped reads in the output 1/0 (default 0)"; 
    echo "-t : Keep temporary files"; 
    echo "-P : number of parallel BLAST searches (default 4/single end and 8/paired end. Donâ€™t change this value if you are unsure of it)"; 
    echo "-h : Help"; 
    echo ""; 
}

if [ $# -eq 0 ]; then Usage; exit 1; fi
# Get arguments except input files
index=1;
while [ $index -le $ARGC ]; do 
flag=${!index};
if [ $flag == "-h" ]; then Usage; exit 1; 
elif [ $flag == "-t" ]; then index=$((index+1)); t=${!index}; 
elif [ $flag == "-p" ]; then index=$((index+1)); p=${!index}; 
elif [ $flag == "-m" ]; then index=$((index+1)); m=${!index}; 
elif [ $flag == "-u" ]; then index=$((index+1)); u=${!index}; 
elif [ $flag == "-r" ]; then index=$((index+1)); R=${!index}; 
elif [ $flag == "-o" ]; then index=$((index+1)); o=${!index}; 
elif [ $flag == "-P" ]; then index=$((index+1)); Proc=${!index}; 
fi
index=$((index+1));
done 
# End of getting arguments
# Get input files
index=1;
while [ $index -le $ARGC ]; do 
flag=${!index};
if [ $flag == "-i" ]; then 
if [ $p -eq 0 ]; then index=$((index+1)); i1=${!index}; 
elif [ $p -eq 1 ]; then index=$((index+1)); i1=${!index}; index=$((index+1)); i2=${!index}; 
else echo "Wrong pairend (-p)  value"; exit 1;
fi
fi
index=$((index+1)) 
done
# End of getting input files


# Check reference file
if [ ! -f $R ]; then echo "File $R  (-r) not found"; exit 1; fi

# Print Input Parameters
echo "=====" 
if [ $p -eq 0 ]; then echo "Pair end: NO";
else echo "Pair end: YES";
fi
echo "Minimum percentage of a match: $m%";
if [ $u -eq 0 ]; then echo "Include unaligned reads in the SAM file: NO";
else echo "Include unaligned reads in the SAM file: YES";
fi
echo "Reference: $R";
echo "Input: $i1 $i2";
echo "Output: $o";
echo "=====" 
######## ACTUAL PROCESSING ########
## This is for cleaning the mess if stopped in the middle
CleanUp() { 
    cd ..
    rm -rf .$$; 
    return $?
}

CtrlC() { 
    echo -en "\n*** Oh No...You have killed it ***\n" 
    CleanUp 
    exit $?
}
trap CtrlC SIGINT
###

START=$(date +%s); 

# Single end reads
if [ $p -eq 0 ]; then
if [ ! -f $i1 ]; then echo "File $i1 not found"; exit 1; fi 

mkdir .$$

#Check if the input is a link
if [ ! -L $i1 ]; then ln $i1 .$$/tnt_1_in; 
else cp $i1 .$$/tnt_1_in; 
fi


# Prepare reference genome for search 

#Check if the input is a link
if [ ! -L $R ]; then ln $R .$$/tnt_5_$$; 
else cp $R .$$/tnt_5_$$; 
fi

#formatdb -p F -i .$$/tnt_5_$$ 
tan_fmdb -p F -i .$$/tnt_5_$$ 
rm -f formatdb.log 
	
cd .$$

# Initialise output file 
cat /dev/null > $o
cat /dev/null > tnt_9_$$

echo "";
# Separate reads and their Quality scores
echo "Preprocessing...";
TANOTI_PREPROCESSOR tnt_1_in 1

Splits=`awk '{print $1}' tnt_0_$$`;
Jobs=0;

# Double the processing for single-end sequences
Proc=`expr $Proc \* 2`;

for (( i=1; i <= $Splits; i++ ))
do
for (( j=1; j <= $Proc; j++ ))
do 
if [ $i -le $Splits ]; then
echo "Mapping...($i of $Splits)";
tan_blast -p blastn -e 0.001 -W 7 -F F -d tnt_5_$$ -i tnt_1_3_$$_$i -o tnt_6_$$_$i -m 7  > tnt_log_$$ 2>&1 &
if [ $j -ne $Proc ]; then let i++; let Jobs++; fi 
fi
done
wait
let i=($i-$Jobs); Jobs=0;
for (( j=1; j <= $Proc; j++ ))
do 
if [ $i -le $Splits ]; then
echo "Post-processing...($i of $Splits)"; 
TANOTI_POSTPROCESSOR tnt_6_$$_$i $m 1 $i > tnt_7_$$_$i  &

if [ $j -ne $Proc ]; then let i++; let Jobs++; fi 
fi
done
wait
let i=($i-$Jobs); Jobs=0;
for (( j=1; j <= $Proc; j++ ))
do 
if [ $i -le $Splits ]; then
echo "Assembling...($i of $Splits)"; 
TANOTI_ASSEMBLER_1 tnt_1_1_$$_$i tnt_1_2_$$_$i tnt_1_4_$$_$i tnt_7_$$_$i $u >> tnt_9_$$
if [ $j -ne $Proc ]; then let i++; fi 
fi
done
done
echo "Generating a SAM file..."; 

# Get all CL parameters
while [ $# -gt 0 ] 
	do 
		cl_str="$cl_str $1"; 
		shift 
	done 
d=`date`; hn=`hostname`; un=`whoami`; pw=`pwd|awk '{n=split($0,a,"/");printf("/");for(i=2;i<n;i++) printf("%s/",a[i]);printf("\n");}'` 
cat tnt_8_*|awk '!x[$0]++' > $o 
echo -e "@CO\tID:tanoti\tTM:$d\tWD:$pw\tCL:$cl_str\tHT:$hn\tUN:$un" >> $o; 
cat tnt_9_$$ >> $o 
mv $o ../.
fi
## End of single end mapping
if [ $p -eq 1 ]; then
if [ ! -f $i1 ]; then echo "File $i1 not found"; exit 1; fi
if [ ! -f $i2 ]; then echo "File $i2 not found"; exit 1; fi 

mkdir .$$
#Check if the input is a link
if [ ! -L $i1 ]; then ln $i1 .$$/tnt_1_in; 
else cp $i1 .$$/tnt_1_in; 
fi

if [ ! -L $i2 ]; then ln $i2 .$$/tnt_2_in; 
else cp $i2 .$$/tnt_2_in;
fi

# Prepare reference genome for search 
#Check if the input is a link
if [ ! -L $R ]; then ln $R .$$/tnt_5_$$; 
else cp $R .$$/tnt_5_$$; 
fi

#formatdb -p F -i .$$/tnt_5_$$ 
tan_fmdb -p F -i .$$/tnt_5_$$ 
rm -f formatdb.log 

cd .$$

# Initialise output file 
cat /dev/null > $o
cat /dev/null > tnt_9_$$

echo ""; 
# Separate reads and their Quality scores 
echo "Preprocessing..."; 
TANOTI_PREPROCESSOR tnt_1_in 1 &
TANOTI_PREPROCESSOR tnt_2_in 2 &
wait

Splits=`awk '{print $1}' tnt_0_$$`;
Jobs=0;

for (( i=1; i <= $Splits; i++ ))
do
for (( j=1; j <= $Proc; j++ ))
do 
if [ $i -le $Splits ]; then
echo "Mapping...($i of $Splits)";
tan_blast -p blastn -e 0.001 -F F -d tnt_5_$$ -i tnt_1_3_$$_$i -o tnt_1_6_$$_$i -m 7  > tnt_log_$$ 2>&1 & 
tan_blast -p blastn -e 0.001 -F F -d tnt_5_$$ -i tnt_2_3_$$_$i -o tnt_2_6_$$_$i -m 7  > tnt_log_$$ 2>&1 & 
if [ $j -ne $Proc ]; then let i++; let Jobs++; fi 
fi
done
wait
let i=($i-$Jobs); Jobs=0;
for (( j=1; j <= $Proc; j++ ))
do 
if [ $i -le $Splits ]; then
echo "Post-processing...($i of $Splits)"; 
TANOTI_POSTPROCESSOR tnt_1_6_$$_$i $m 1 $i > tnt_1_7_$$_$i &
TANOTI_POSTPROCESSOR tnt_2_6_$$_$i $m 2 $i > tnt_2_7_$$_$i &
if [ $j -ne $Proc ]; then let i++; let Jobs++; fi 
fi
done
wait
let i=($i-$Jobs); Jobs=0;
for (( j=1; j <= $Proc; j++ ))
do 
if [ $i -le $Splits ]; then
echo "Assembling...($i of $Splits)"; 
TANOTI_ASSEMBLER_2 tnt_1_1_$$_$i tnt_1_2_$$_$i tnt_1_4_$$_$i tnt_2_1_$$_$i tnt_2_2_$$_$i tnt_2_4_$$_$i tnt_1_7_$$_$i  tnt_2_7_$$_$i $u >> tnt_9_$$
if [ $j -ne $Proc ]; then let i++; fi 
fi
done
done
echo "Generating a SAM file..."; 

# Get all CL parameters
while [ $# -gt 0 ] 
    do 
        cl_str="$cl_str $1"; 
        shift 
    done 
d=`date`; hn=`hostname`; un=`whoami`; pw=`pwd|awk '{n=split($0,a,"/");printf("/");for(i=2;i<n;i++) printf("%s/",a[i]);printf("\n");}'`
cat tnt_8_*|awk '!x[$0]++' > $o
echo -e "@CO\tID:tanoti\tTM:$d\tWD:$pw\tCL:$cl_str\tHT:$hn\tUN:$un" >> $o; 
cat tnt_9_$$ >> $o 
mv $o ../.
fi

END=$(date +%s);
DIFF=$(( $END - $START ));
MIN=`expr $DIFF / 60`; 
SEC=`expr $DIFF % 60`; 
echo "Time taken $MIN:$SEC";

# Cleaning the directory
if [ $t -eq 0 ]; then echo "Removing temporary files...."; rm -f tnt_*; cd ..; rmdir .$$; fi
