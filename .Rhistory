dir <- dirs_fhi[grep(paste0(oppsett, "\\b"), dirs_fhi)]
dir
# List the files
filepaths <- list.files(path = dir,
pattern = "ivar\\.consensus\\.masked_Nremoved\\.fa$",
full.names = TRUE,
recursive = TRUE)
samples <- str_sub(gsub("SWIFT", "", gsub("_.*","", gsub(".*/","", filepaths))), start = 1, end = -1)
# Find which filepaths to keep
keep <- vector()
for (i in seq_along(oppsett_details$KEY)){
keep[i] <- filepaths[grep(oppsett_details$KEY[i], filepaths)]
}
# Read each fasta file and combine them to create one file
# First create empty data frame to fill
fastas <- data.frame(seq.name = character(),
seq.text = character())
for (f in seq_along(keep)){
tmp <- read.fasta(keep[f])      # read the file
fastas <- rbind(fastas, tmp)    # append the current file
}
# Convert to tibble for easier manipulation
fastas <- as_tibble(fastas)
# Fix names to match KEY
fastas <- fastas %>%
mutate(tmp = str_remove(seq.name, "_ivar_masked")) %>%
mutate(KEY = str_remove(tmp, "SWIFT"))
# Sett Virus name som fasta header
# Først lage en mapping mellom KEY og virus name
KEY_virus_mapping <- oppsett_details %>%
# Lage kolonne for "year"
separate(PROVE_TATT, into = c("Year", NA, NA), sep = "-", remove = FALSE) %>%
# Trekke ut sifrene fra 5 og til det siste fra BN KEY
mutate("Uniq_nr" = str_sub(KEY, start = 5, end = -1)) %>%
# Legge til kolonner med fast informasjon for å lage "Virus name" senere
add_column("Separator" = "/",
"GISAID_prefix" = "hCoV-19/",
"Country" = "Norway/",
"Continent" = "Europe/") %>%
# Make "Virus name" column
unite("covv_virus_name", c(GISAID_prefix, Country, Uniq_nr, Separator, Year), sep = "", remove = FALSE) %>%
select(KEY, covv_virus_name)
fastas <- left_join(fastas, KEY_virus_mapping, by = "KEY") %>%
select(covv_virus_name, seq.text) %>%
rename(`seq.name` = covv_virus_name)
dat2fasta(fastas, outfile = "/home/jonr/FHI_SC2_Pipeline_Illumina/Frameshift/tmp.fasta")
system("docker run --rm -v $(pwd):/home/docker/Fastq garcianacho/fhisc2:Illumina Rscript --vanilla /home/docker/Scripts/CSAK_Frameshift_Finder_docker.R")
# Remove any samples with bad FS
fastas <- Drop_FS_from_fasta(fastas)
# Drop the same samples from the metadata file
metadata <- Drop_FS_from_metadata(metadata)
# Clean up
clean_up()
metadata_file
metadata_file <- "FHI202.csv"
write_csv(metadata, file = metadata_file)
fasta_filename
dat2fasta(fastas, outfile = fasta_filename)
oppsett <- "FHI203"
fasta_filename <- "FHI203.fasta"
metadata_file <- "FHI203.csv"
# Trekk ut relevant oppsett og filtrer
oppsett_details <- BN %>%
filter(SEKV_OPPSETT_SWIFT7 == oppsett) %>%
# Fjerne evt positiv controll
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Filtrer på coverage >= 97%
filter(Dekning_Swift >=97) %>%
# Fjerne de som mangler Fylkenavn
filter(!is.na(FYLKENAVN))
metadata <- oppsett_details %>%
# Lage kolonne for "year"
separate(PROVE_TATT, into = c("Year", NA, NA), sep = "-", remove = FALSE) %>%
# Trekke ut sifrene fra 5 og til det siste fra BN KEY
mutate("Uniq_nr" = str_sub(KEY, start = 5, end = -1)) %>%
# Legge til kolonner med fast informasjon for å lage "Virus name" senere
add_column("Separator" = "/",
"GISAID_prefix" = "hCoV-19/",
"Country" = "Norway/",
"Continent" = "Europe/") %>%
# Make "Virus name" column
unite("covv_virus_name", c(GISAID_prefix, Country, Uniq_nr, Separator, Year), sep = "", remove = FALSE) %>%
# Lage Location-kolonne
unite("covv_location", c(Continent, Country, FYLKENAVN), sep = "", remove = FALSE) %>%
# Legge til faste kolonner
add_column("submitter" = submitter,
"fn" = fasta_filename,
"covv_type" = type,
"covv_passage" = passage,
"covv_host" = host,
"covv_gender" = gender,
"covv_patient_age" = age,
"covv_patient_status" = status,
"covv_specimen" = specimen,
"covv_seq_technology" = seq_tech,
"covv_assembly_method" = ass_method,
"covv_orig_lab" = orig_lab,
"covv_orig_lab_addr" = orig_adr,
"covv_subm_lab" = sub_lab,
"covv_subm_lab_addr" = address,
"covv_authors" = authors,
"covv_subm_sample_id" = covv_subm_sample_id,
"covv_outbreak" = covv_outbreak,
"covv_add_host_info" = covv_add_host_info,
"covv_add_location" = covv_add_location,
"covv_provider_sample_id" = covv_provider_sample_id,
"covv_last_vaccinated" = covv_last_vaccinated,
"covv_treatment" = covv_treatment) %>%
# Beholde endelige kolonner og rekkefølge
select("submitter",
"fn",
"covv_virus_name",
"covv_type",
"covv_passage",
"covv_collection_date" = PROVE_TATT,
"covv_location",
"covv_host",
"covv_gender",
"covv_patient_age",
"covv_patient_status",
"covv_specimen",
"covv_seq_technology",
"covv_assembly_method",
"covv_orig_lab",
"covv_orig_lab_addr",
"covv_subm_lab",
"covv_subm_lab_addr",
"covv_authors",
"covv_subm_sample_id",
"covv_outbreak",
"covv_add_host_info",
"covv_add_location",
"covv_provider_sample_id",
"covv_last_vaccinated",
"covv_treatment",
"covv_coverage" = COVERAGE_DEPTH_SWIFT,
"INNSENDER")
# Legge inn orig lab og adresse
metadata <- lookup_function(metadata)
# Remove column INNSENDER
metadata <- metadata %>% select(-INNSENDER)
# Pick our the relevant oppsett
dir <- dirs_fhi[grep(paste0(oppsett, "\\b"), dirs_fhi)]
dir
# List the files
filepaths <- list.files(path = dir,
pattern = "ivar\\.consensus\\.masked_Nremoved\\.fa$",
full.names = TRUE,
recursive = TRUE)
samples <- str_sub(gsub("SWIFT", "", gsub("_.*","", gsub(".*/","", filepaths))), start = 1, end = -1)
# Find which filepaths to keep
keep <- vector()
for (i in seq_along(oppsett_details$KEY)){
keep[i] <- filepaths[grep(oppsett_details$KEY[i], filepaths)]
}
# Read each fasta file and combine them to create one file
# First create empty data frame to fill
fastas <- data.frame(seq.name = character(),
seq.text = character())
for (f in seq_along(keep)){
tmp <- read.fasta(keep[f])      # read the file
fastas <- rbind(fastas, tmp)    # append the current file
}
# Convert to tibble for easier manipulation
fastas <- as_tibble(fastas)
# Fix names to match KEY
fastas <- fastas %>%
mutate(tmp = str_remove(seq.name, "_ivar_masked")) %>%
mutate(KEY = str_remove(tmp, "SWIFT"))
# Sett Virus name som fasta header
# Først lage en mapping mellom KEY og virus name
KEY_virus_mapping <- oppsett_details %>%
# Lage kolonne for "year"
separate(PROVE_TATT, into = c("Year", NA, NA), sep = "-", remove = FALSE) %>%
# Trekke ut sifrene fra 5 og til det siste fra BN KEY
mutate("Uniq_nr" = str_sub(KEY, start = 5, end = -1)) %>%
# Legge til kolonner med fast informasjon for å lage "Virus name" senere
add_column("Separator" = "/",
"GISAID_prefix" = "hCoV-19/",
"Country" = "Norway/",
"Continent" = "Europe/") %>%
# Make "Virus name" column
unite("covv_virus_name", c(GISAID_prefix, Country, Uniq_nr, Separator, Year), sep = "", remove = FALSE) %>%
select(KEY, covv_virus_name)
fastas <- left_join(fastas, KEY_virus_mapping, by = "KEY") %>%
select(covv_virus_name, seq.text) %>%
rename(`seq.name` = covv_virus_name)
dat2fasta(fastas, outfile = "/home/jonr/FHI_SC2_Pipeline_Illumina/Frameshift/tmp.fasta")
system("docker run --rm -v $(pwd):/home/docker/Fastq garcianacho/fhisc2:Illumina Rscript --vanilla /home/docker/Scripts/CSAK_Frameshift_Finder_docker.R")
# Remove any samples with bad FS
fastas <- Drop_FS_from_fasta(fastas)
# Drop the same samples from the metadata file
metadata <- Drop_FS_from_metadata(metadata)
# Clean up
clean_up()
metadata_file
write_csv(metadata, file = metadata_file)
fasta_filename
dat2fasta(fastas, outfile = fasta_filename)
library(tidyverse)
# Read data from BioNumerics ----------------------------------------------
# Les inn BN spørring. Husk å Refreshe og lagre den originale excel-fila først (N:/Virologi/Influensa/2021/Spørringsfiler BN/SQLSERVER_TestBN_Spørring_Entrytable.xlsx)
BN <- read_excel("/mnt/N/Virologi/Influensa/2021/Spørringsfiler BN/SQLSERVER_TestBN_Spørring_Entrytable.xlsx", sheet = "Sporring BN") %>%
select(KEY, REKVNR, PROVE_TATT, FYLKENAVN, MATERIALE, PROSENTDEKNING_GENOM, DEKNING_NANOPORE, SEKV_OPPSETT_NANOPORE, DEKNING_NANOPORE,
SEKV_OPPSETT_SWIFT7, SEQUENCEID_NANO29, SEQUENCEID_SWIFT, COVERAGE_BREADTH_SWIFT, GISAID_PLATFORM, GISAID_EPI_ISL,
GENOTYPE_SVART_I_LABWARE, COVERAGE_BREATH_EKSTERNE, SAMPLE_CATEGORY, INNSENDER, COVERAGE_DEPTH_SWIFT, COVARAGE_DEPTH_NANO,
RES_CDC_INFA_RX, RES_CDC_INFB_CT, MELDT_SMITTESPORING) %>%
rename("Dekning_Artic" = PROSENTDEKNING_GENOM, "Dekning_Swift" = COVERAGE_BREADTH_SWIFT, "Dekning_Nano" = DEKNING_NANOPORE)
# Load packages
pacman::p_load(tidyverse, readxl, stringr, lubridate)
# Read data from BioNumerics ----------------------------------------------
# Les inn BN spørring. Husk å Refreshe og lagre den originale excel-fila først (N:/Virologi/Influensa/2021/Spørringsfiler BN/SQLSERVER_TestBN_Spørring_Entrytable.xlsx)
BN <- read_excel("/mnt/N/Virologi/Influensa/2021/Spørringsfiler BN/SQLSERVER_TestBN_Spørring_Entrytable.xlsx", sheet = "Sporring BN") %>%
select(KEY, REKVNR, PROVE_TATT, FYLKENAVN, MATERIALE, PROSENTDEKNING_GENOM, DEKNING_NANOPORE, SEKV_OPPSETT_NANOPORE, DEKNING_NANOPORE,
SEKV_OPPSETT_SWIFT7, SEQUENCEID_NANO29, SEQUENCEID_SWIFT, COVERAGE_BREADTH_SWIFT, GISAID_PLATFORM, GISAID_EPI_ISL,
GENOTYPE_SVART_I_LABWARE, COVERAGE_BREATH_EKSTERNE, SAMPLE_CATEGORY, INNSENDER, COVERAGE_DEPTH_SWIFT, COVARAGE_DEPTH_NANO,
RES_CDC_INFA_RX, RES_CDC_INFB_CT, MELDT_SMITTESPORING) %>%
rename("Dekning_Artic" = PROSENTDEKNING_GENOM, "Dekning_Swift" = COVERAGE_BREADTH_SWIFT, "Dekning_Nano" = DEKNING_NANOPORE)
BN %>%
pull(MELDT_SMITTESPORING)
BN %>%
filter(is.na(MELDT_SMITTESPORING))
BN %>%
filter(is.na(MELDT_SMITTESPORING)) %>% pull(MELDT_SMITTESPORING)
BN %>%
filter(!is.na(MELDT_SMITTESPORING)) %>% pull(MELDT_SMITTESPORING)
BN %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE))
BN %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
filter(str_detect(GISAID_EPI_ISL, "^EPI"))
BN %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
filter(str_detect(GISAID_EPI_ISL, "^EPI")) %>% pull(GISAID_EPI_ISL)
BN %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
filter(str_detect(GISAID_EPI_ISL, "^EPI", negate = TRUE)) %>% pull(GISAID_EPI_ISL)
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
filter(is.na(GISAID_EPI_ISL) %>% pull(GISAID_EPI_ISL)
)
BN %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
filter(is.na(GISAID_EPI_ISL)) %>% pull(GISAID_EPI_ISL)
BN %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
# Using the is.na() filter because there could be other strings than the EPI_ISL accession written
filter(is.na(GISAID_EPI_ISL))
BN %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
# Using the is.na() filter because there could be other strings than the EPI_ISL accession written
filter(is.na(GISAID_EPI_ISL)) %>%
# Get the various plates
select(KEY, SEKV_OPPSETT_NANOPORE, SEKV_OPPSETT_SWIFT7, SEQUENCEID_NANO29)
BN %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
# Using the is.na() filter because there could be other strings than the EPI_ISL accession written
filter(is.na(GISAID_EPI_ISL)) %>%
# Get the various plates
select(KEY, SEKV_OPPSETT_NANOPORE, SEKV_OPPSETT_SWIFT7, SEQUENCEID_NANO29) %>% View()
BN %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
# Using the is.na() filter because there could be other strings than the EPI_ISL accession written
filter(is.na(GISAID_EPI_ISL)) %>%
# Get the various plates
select(KEY, SEKV_OPPSETT_NANOPORE, SEKV_OPPSETT_SWIFT7, SAMPLE_CATEGORY) %>% View()
BN %>%
# Formate the date
mutate("PROVE_TATT" = ymd(PROVE_TATT)) %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
# Using the is.na() filter because there could be other strings than the EPI_ISL accession written
filter(is.na(GISAID_EPI_ISL)) %>%
# Get the various plates
select(KEY, PROVE_TATT, SEKV_OPPSETT_NANOPORE, SEKV_OPPSETT_SWIFT7, SAMPLE_CATEGORY) %>% View()
BN %>%
# Formate the date
mutate("PROVE_TATT" = ymd(PROVE_TATT)) %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
# Using the is.na() filter because there could be other strings than the EPI_ISL accession written
filter(is.na(GISAID_EPI_ISL)) %>%
# Get the various plates
select(KEY, PROVE_TATT, SEKV_OPPSETT_NANOPORE, SEKV_OPPSETT_SWIFT7, SAMPLE_CATEGORY) %>%
group_by(SEKV_OPPSETT_NANOPORE)
BN %>%
# Formate the date
mutate("PROVE_TATT" = ymd(PROVE_TATT)) %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
# Using the is.na() filter because there could be other strings than the EPI_ISL accession written
filter(is.na(GISAID_EPI_ISL)) %>%
# Get the various plates
select(KEY, PROVE_TATT, SEKV_OPPSETT_NANOPORE, SEKV_OPPSETT_SWIFT7, SAMPLE_CATEGORY) %>%
group_by(SEKV_OPPSETT_NANOPORE, SEKV_OPPSETT_SWIFT7, SAMPLE_CATGEGORY)
BN %>%
# Formate the date
mutate("PROVE_TATT" = ymd(PROVE_TATT)) %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
# Using the is.na() filter because there could be other strings than the EPI_ISL accession written
filter(is.na(GISAID_EPI_ISL)) %>%
# Get the various plates
select(KEY, PROVE_TATT, SEKV_OPPSETT_NANOPORE, SEKV_OPPSETT_SWIFT7, SAMPLE_CATEGORY) %>%
group_by(SEKV_OPPSETT_NANOPORE, SEKV_OPPSETT_SWIFT7, SAMPLE_CATEGORY)
BN %>%
# Formate the date
mutate("PROVE_TATT" = ymd(PROVE_TATT)) %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
# Using the is.na() filter because there could be other strings than the EPI_ISL accession written
filter(is.na(GISAID_EPI_ISL)) %>%
# Get the various plates
select(KEY, PROVE_TATT, SEKV_OPPSETT_NANOPORE, SEKV_OPPSETT_SWIFT7, SAMPLE_CATEGORY) %>%
# Select one sample per oppsett
group_by(SEKV_OPPSETT_NANOPORE, SEKV_OPPSETT_SWIFT7, SAMPLE_CATEGORY) %>%
slice_head(n = 1)
BN %>%
# Formate the date
mutate("PROVE_TATT" = ymd(PROVE_TATT)) %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
# Using the is.na() filter because there could be other strings than the EPI_ISL accession written
filter(is.na(GISAID_EPI_ISL)) %>%
# Get the various plates
select(KEY, PROVE_TATT, SEKV_OPPSETT_NANOPORE, SEKV_OPPSETT_SWIFT7, SAMPLE_CATEGORY) %>%
# Select one sample per oppsett
group_by(SEKV_OPPSETT_NANOPORE, SEKV_OPPSETT_SWIFT7, SAMPLE_CATEGORY) %>%
slice_head(n = 1) %>% View()
?arrange
BN %>%
# Formate the date
mutate("PROVE_TATT" = ymd(PROVE_TATT)) %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
# Using the is.na() filter because there could be other strings than the EPI_ISL accession written
filter(is.na(GISAID_EPI_ISL)) %>%
# Get the various plates
select(KEY, PROVE_TATT, SEKV_OPPSETT_NANOPORE, SEKV_OPPSETT_SWIFT7, SAMPLE_CATEGORY) %>%
# Select one sample per oppsett
group_by(SEKV_OPPSETT_NANOPORE, SEKV_OPPSETT_SWIFT7, SAMPLE_CATEGORY) %>%
slice_head(n = 1) %>%
# Sort by date
arrange(desc(PROVE_TATT))
BN %>%
# Formate the date
mutate("PROVE_TATT" = ymd(PROVE_TATT)) %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
# Using the is.na() filter because there could be other strings than the EPI_ISL accession written
filter(is.na(GISAID_EPI_ISL)) %>%
# Get the various plates
select(KEY, PROVE_TATT, SEKV_OPPSETT_NANOPORE, SEKV_OPPSETT_SWIFT7, SAMPLE_CATEGORY) %>%
# Select one sample per oppsett
group_by(SEKV_OPPSETT_NANOPORE, SEKV_OPPSETT_SWIFT7, SAMPLE_CATEGORY) %>%
slice_head(n = 1) %>%
# Sort by date
arrange(desc(PROVE_TATT)) %>% View()
# Check MIK
BN %>%
# Format the date
mutate("PROVE_TATT" = ymd(PROVE_TATT)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
# Using the is.na() filter because there could be other strings than the EPI_ISL accession written
filter(is.na(GISAID_EPI_ISL)) %>%
# Get the various plates
select(KEY, PROVE_TATT, SEKV_OPPSETT_SWIFT7) %>%
# Select one sample per oppsett
group_by(SEKV_OPPSETT_SWIFT7) %>%
slice_head(n = 1) %>%
# Sort by date
arrange(desc(PROVE_TATT)) %>% View()
# Check MIK
BN %>%
filter(str_detect(SEKV_OPPSETT_SWIFT7, "MIK")) %>%
# Format the date
mutate("PROVE_TATT" = ymd(PROVE_TATT)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
# Using the is.na() filter because there could be other strings than the EPI_ISL accession written
filter(is.na(GISAID_EPI_ISL)) %>%
# Get the various plates
select(KEY, PROVE_TATT, SEKV_OPPSETT_SWIFT7) %>%
# Select one sample per oppsett
group_by(SEKV_OPPSETT_SWIFT7) %>%
slice_head(n = 1) %>%
# Sort by date
arrange(desc(PROVE_TATT)) %>% View()
BN %>%
# Format the date
mutate("PROVE_TATT" = ymd(PROVE_TATT)) %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
# Using the is.na() filter because there could be other strings than the EPI_ISL accession written
filter(str_detect(GISAID_EPI_ISL, "^>EPI"))
BN %>%
# Format the date
mutate("PROVE_TATT" = ymd(PROVE_TATT)) %>%
# Behold bare de som er meldt smittesporing. Disse skal da være godkjent.
filter(!is.na(MELDT_SMITTESPORING)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
# Using the is.na() filter because there could be other strings than the EPI_ISL accession written
filter(str_detect(GISAID_EPI_ISL, "^>EPI")) %>% View()
BN %>%
filter(str_detect(SEKV_OPPSETT_SWIFT7, "MIK")) %>%
# Format the date
mutate("PROVE_TATT" = ymd(PROVE_TATT)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
filter(str_detect(GISAID_EPI_ISL, "^EPI")) %>% View()
# Check already submitted MIK samples
BN %>%
filter(str_detect(SEKV_OPPSETT_SWIFT7, "MIK")) %>%
# Format the date
mutate("PROVE_TATT" = ymd(PROVE_TATT)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
filter(str_detect(GISAID_EPI_ISL, "^EPI")) %>%
select(KEY, PROVE_TATT, GISAID_EPI_ISL, SEKV_OPPSETT_SWIFT7) %>% View()
# Check already submitted MIK samples
BN %>%
filter(str_detect(SEKV_OPPSETT_SWIFT7, "MIK")) %>%
# Format the date
mutate("PROVE_TATT" = ymd(PROVE_TATT)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
filter(str_detect(GISAID_EPI_ISL, "^EPI")) %>%
select(KEY, PROVE_TATT, GISAID_EPI_ISL, SEKV_OPPSETT_SWIFT7) %>%
arrange(desc(PROVE_TATT)) %>% View()
# Check MIK
BN %>%
filter(str_detect(SEKV_OPPSETT_SWIFT7, "MIK")) %>%
# Format the date
mutate("PROVE_TATT" = ymd(PROVE_TATT)) %>%
# Fjerne evt positive kontroller
filter(str_detect(KEY, "pos", negate = TRUE)) %>%
# Fjerne de som allerede er submittet til Gisaid. NB - husk å importere submisjonsresultater først.
# Using the is.na() filter because there could be other strings than the EPI_ISL accession written
filter(is.na(GISAID_EPI_ISL)) %>%
# Get the various plates
select(KEY, PROVE_TATT, SEKV_OPPSETT_SWIFT7) %>%
# Select one sample per oppsett
group_by(SEKV_OPPSETT_SWIFT7) %>%
slice_head(n = 1) %>%
# Sort by date
arrange(desc(PROVE_TATT)) %>% View()
